<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="pantry.css"> <!-- Link to the external CSS file -->
</head>
<body>
    <nav class="navbar">
        <h1>Food Image Analyzer</h1>
        <a href="/">Logout</a>
    </nav>
    <form id="uploadForm" enctype="multipart/form-data">
        <input type="file" id="imageInput" name="image" accept="image/*" required>
        <button type="submit">Analyze Image</button>
    </form>
    <div id="result">
        <strong><p>Detected Items:</p></strong>
        <div class="scroll-container">
            <ul id="foodList"></ul>
        </div>
    </div>

    <div id="inventory">
        <strong><p>Inventory</p></strong>
        <div class="scroll-container">
            <ul id="inventoryList"></ul>
        </div>
    </div>

     <button id="generateMealsBtn">Generate Meals</button>
     <div id="mealsContainer"></div>
    <script>
        document.addEventListener('DOMContentLoaded', fetchInventory);

        // Get references to the form and result elements
        const form = document.getElementById('uploadForm');
        const resultDiv = document.getElementById('result');
        const foodList = document.getElementById('foodList');
        const inventoryList = document.getElementById('inventoryList');

        // Fetch the current inventory and update the list
        async function fetchInventory() {
            try {
                // Fetch the inventory data
                const response = await fetch('/inventory');
                if (!response.ok) {
                    throw new Error('Failed to fetch inventory');
                }

                // Update the inventory list
                const data = await response.json();
                inventoryList.innerHTML = '';
                data.items.forEach(item => {
                    const li = document.createElement('li');
                    li.className = 'inventory-item';
                    li.innerHTML = `
                        <span>${item.name}</span>
                        <button class="delete-btn" data-item="${item.name}">Ã—</button>
                    `;
                    inventoryList.appendChild(li);
                });

                // Add event listeners to delete buttons
                document.querySelectorAll('.delete-btn').forEach(button => {
                    button.addEventListener('click', async function() {
                        const itemName = this.getAttribute('data-item');
                        try {
                            const response = await fetch(`/delete_item?item=${encodeURIComponent(itemName)}`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                }
                            });
                            if (!response.ok) {
                                throw new Error('Failed to delete item');
                            }

                            // Refresh the inventory after successful deletion
                            await fetchInventory(); 
                        } catch (error) {
                            console.error('Error:', error);
                            alert(`Failed to delete item: ${error.message}`);
                        }
                    });
                });
            } catch (error) {
                inventoryList.innerHTML = `<li>Error: ${error.message}</li>`;
            }
        }

        form.addEventListener('submit', async function(event) {
            event.preventDefault();
            const formData = new FormData(form);
            
            try {
                foodList.innerHTML = '<li>Analyzing image...</li>';
                const response = await fetch('/analyze-image', {
                    method: 'POST',
                    body: formData
                });
                
                if (!response.ok) {
                    throw new Error('Image analysis failed');
                }
                
                const data = await response.json();
                const foodItems = data.items.split(',').map(item => item.trim());
                
                foodList.innerHTML = '';
                foodItems.forEach(item => {
                    const li = document.createElement('li');
                    li.textContent = item;
                    foodList.appendChild(li);
                });

                if (data.message) {
                    const flashMessage = document.createElement('div');
                    flashMessage.className = 'flash-message';
                    flashMessage.textContent = data.message;
                    resultDiv.prepend(flashMessage);
                }

            } catch (error) {
                foodList.innerHTML = `<li>Error: ${error.message}</li>`;
            }

            await fetchInventory();
        });

          document.getElementById('generateMealsBtn').addEventListener('click', async () => {
            try {
                const response = await fetch('/generate_meals', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                const data = await response.json();
                console.log('Meals:', data.meals);

                // Display the meals on the page
                const mealsContainer = document.getElementById('mealsContainer');
                mealsContainer.innerHTML = ''; // Clear previous meals

                data.meals.forEach(meal => {
                    const mealDiv = document.createElement('div');
                    mealDiv.innerHTML = `
                        <h3>${meal.title}</h3>
                        <img src="${meal.image}" alt="${meal.title}" style="width:200px;">
                        <p><strong>Used Ingredients:</strong> ${meal.usedIngredients.map(i => `${i.name} (${i.amount} ${i.unit})`).join(', ')}</p>
                        <p><strong>Missed Ingredients:</strong> ${meal.missedIngredients.map(i => `${i.name} (${i.amount} ${i.unit})`).join(', ')}</p>
                        <p><strong>Instructions:</strong> ${meal.instructions}</p>
                    `;
                    
                    mealsContainer.appendChild(mealDiv);
                });
            } catch (error) {
                console.error('Error:', error);
            }
        });

    </script>
</body>
</html>
