<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="filtered.css"> 
    <title>Filtered Recipes</title>
</head>
<body>
    <nav class="navbar">
        <div id="userProfile">
            {{#if user.profile_picture}}
                <img src="/uploads/{{user.profile_picture}}" alt="Profile Picture" id="profilePicture">
                <a href="/" id="logoutLink">Logout</a>
            {{else}}
                <p></p>
            {{/if}}
        </div>

        <button id="generateMealsBtn">View Filtered Recipes</button>

        <button id="generateMealPlan">Generate Meal Plan</button>

        <select id="mealPlanDays" style="width: 100px;">
            <option value="1">1 day</option>
            <option value="2">2 days</option>
            <option value="3">3 days</option>
            <option value="4">4 days</option>
            <option value="5">5 days</option>
            <option value="6">6 days</option>
            <option value="7">7 days</option>
        </select>


    </nav>

    <div id="mealsContainer"></div>
    <div id="mealPlanContainer"></div>

    <script>
        
    document.getElementById('generateMealPlan').addEventListener('click', async () => {
    const days = document.getElementById('mealPlanDays').value;

    try {
        const response = await fetch(`/meal_plan?days=${days}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }

        const data = await response.json();
        displayMealPlan(data);
        console.log('Meal Plan:', data);
    } catch (error) {
        console.error('Error fetching meal plan:', error);
    }   
});

// Display the meal plan on the page
function displayMealPlan(data) {
    const mealPlanContainer = document.getElementById('mealPlanContainer');
    mealPlanContainer.innerHTML = '';

    // Display the meal plan on the page
    if (data.mealPlan && data.mealPlan.length > 0) {
        data.mealPlan.forEach((dayMeals, index) => {
            const dayDiv = document.createElement('div');
            dayDiv.className = 'day-meal-plan';
            dayDiv.innerHTML = `<h2>Day ${index + 1}</h2>`;

            // Display breakfast, lunch, and dinner meals
            ['breakfast', 'lunch', 'dinner'].forEach(mealType => {
                const mealData = dayMeals[mealType];
                const mealDiv = document.createElement('div');
                mealDiv.className = 'meal';

                // Display meal data
                if (mealData) {
                    mealDiv.innerHTML = `
                        <h3>${mealType.charAt(0).toUpperCase() + mealType.slice(1)}: ${mealData.title}</h3>
                        <img src="${mealData.image}" alt="${mealData.title}" style="width:200px;">
                        <p><strong>Used Ingredients:</strong> ${mealData.usedIngredients.map(i => i.name).join(', ')}</p>
                        <p><strong>Missed Ingredients:</strong> ${mealData.missedIngredients.map(i => i.name).join(', ')}</p>
                        <p><strong>Instructions:</strong> ${mealData.instructions}</p>
                    `;
                } else {
                    mealDiv.innerHTML = `<h3>${mealType.charAt(0).toUpperCase() + mealType.slice(1)}: No recipe available</h3>`;
                }

                dayDiv.appendChild(mealDiv);
            });

            mealPlanContainer.appendChild(dayDiv);
        });
    } else {
        mealPlanContainer.innerHTML = '<p>No meal plan data available.</p>';
    }

    // Display leftover ingredients
    if (data.leftoverIngredients && data.leftoverIngredients.length > 0) {
        const leftoverDiv = document.createElement('div');
        leftoverDiv.innerHTML = `
            <h3>Leftover Ingredients</h3>
            <p>${data.leftoverIngredients.join(', ')}</p>
        `;
        mealPlanContainer.appendChild(leftoverDiv);
    }
}

        // Display the meals on the page
        document.getElementById('generateMealsBtn').addEventListener('click', async () => {
            try {
                const response = await fetch('/filter_meals', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                const data = await response.json();
                console.log('Meals:', data.meals);

                // Display the meals on the page
                const mealsContainer = document.getElementById('mealsContainer');
                mealsContainer.innerHTML = ''; // Clear previous meals

                data.meals.forEach(meal => {
                    const mealDiv = document.createElement('div');
                    mealDiv.innerHTML = `
                        <h3>${meal.title}</h3>
                        <img src="${meal.image}" alt="${meal.title}" style="width:200px;">
                        <p><strong>Used Ingredients:</strong> ${meal.usedIngredients.map(i => `${i.name} (${i.amount} ${i.unit})`).join(', ')}</p>
                        <p><strong>Missed Ingredients:</strong> ${meal.missedIngredients.map(i => `${i.name} (${i.amount} ${i.unit})`).join(', ')}</p>
                        <p><strong>Instructions:</strong> ${meal.instructions}</p>
                    `;
                    
                    mealsContainer.appendChild(mealDiv);
                });
            } catch (error) {
                console.error('Error:', error);
            }
        });

    // Toggle logout link visibility
    document.getElementById('profilePicture').addEventListener('click', () => {
        const logoutLink = document.getElementById('logoutLink');
        logoutLink.style.display = logoutLink.style.display === 'block' ? 'none' : 'block';
    });
    </script>
</body>
</html>